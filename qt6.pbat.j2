{% set majmin = ver.rsplit(".", 1)[0] %}
{% set host1 = "qt.mirror.constant.com" %}
{% set host = "download.qt.io" %}
{% set modules = ["qtbase", "qtactiveqt", "qtcoap", "qtimageformats", "qtlanguageserver", "qtnetworkauth", "qtserialport", "qtserialbus", "qtshadertools", "qtsvg", "qtdeclarative", "qt5compat", "qtconnectivity", "qtgrpc", "qtlottie", "qtmqtt", "qtopcua", "qtpositioning", "qtlocation", "qtquicktimeline", "qtquick3d", "qtgraphs", "qtmultimedia", "qt3d", "qtcharts", "qtdatavis3d", "qtquick3dphysics", "qtquickeffectmaker", "qtremoteobjects", "qtscxml", "qtsensors", "qtspeech", "qttools", "qttranslations", "qtvirtualkeyboard", "qtwayland", "qtwebsockets", "qthttpserver", "qtwebchannel", "qtdoc", "qtwebview"] %}
{% set modules1 = ['qtshadertools', 'qtimageformats', 'qtlanguageserver', 'qtsvg', 'qtserialport', 'qtactiveqt', 'qtdeclarative', 'qtwebsockets', 'qtsensors', 'qttools', 'qtpositioning', 'qtlocation', 'qtquicktimeline', 'qthttpserver', 'qtquick3d', 'qtmultimedia', 'qtquick3dphysics', 'qtgraphs', 'qtdoc'] %}

{% if mkspec == "win32-g++" %}
{% set subdir = "mingw_64" %}
{% set compiler = "mingw13" %}
{% set cc = "gcc" %}
{% set cxx = "g++" %}
{% else %}
{% set subdir = "msvc2020_64" %}
{% set compiler = "msvc2020" %}
{% set cc = "cl" %}
{% set cxx = "cl" %}
{% endif %}

{% macro env() %}
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    add_path(C:\postgresql-14\bin)
    add_path(C:\Qt\{{ver}}\{{subdir}}\bin)
    use(python, 3.13)
    use(conda)
    use(cmake)
    # where python
    install(mugideploy)
    install(ninja)
    set LLVM_INSTALL_DIR=C:\llvm19
    {% if mkspec == "win32-g++" %}
    add_path(C:\mingw1310_64\bin)
    set CC=C:\mingw1310_64\bin\gcc
    set CXX=C:\mingw1310_64\bin\g++
    {% else %}
    call_vcvars()
    {% endif %}
    add_path(C:\llvm19\bin)
    add_path(C:\protoc\bin)
{% endmacro %}

def prepare
    github_checkout()
    if exist C:\mingw64 move /y C:\mingw64 C:\mingw64_
    if exist "C:\Program Files\PostgreSQL" move /y "C:\Program Files\PostgreSQL" "C:\Program Files\PostgreSQL_"
    if exist "C:\Program Files\MySQL" move /y "C:\Program Files\MySQL" "C:\Program Files\MySQL_"
    if exist "C:\Program Files\OpenSSL" move /y "C:\Program Files\OpenSSL" "C:\Program Files\OpenSSL_"
    if exist C:\Strawberry move /y C:\Strawberry C:\Strawberry_
    if exist C:\tools\php move /y C:\tools\php C:\tools\php_
    if exist "C:\Program Files\LLVM" move /y "C:\Program Files\LLVM" "C:\Program Files\LLVM_"

def get_source
    if_exist_return(qt-everywhere-src-{{ver}})
    download(https://{{host}}/official_releases/qt/{{majmin}}/{{ver}}/single/qt-everywhere-src-{{ver}}.zip, :cache, :v)
    unzip(qt-everywhere-src-{{ver}}.zip, :t=qt-everywhere-src-{{ver}})

def configure
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}
        mkdir(build)
        pushd build
            # -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            call ..\configure -prefix C:\Qt\{{ver}}\{{subdir}} -platform {{mkspec}} -release -skip qtwebengine -nomake examples -nomake tests -- -DFEATURE_system_zlib=OFF -DFEATURE_sql_mysql=ON -DFEATURE_sql_psql=ON -DPostgreSQL_ROOT=C:/postgresql-14 -DMySQL_ROOT=C:/mysql-8.2.0-winx64 -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            type config.summary
        popd
    popd

def llvm
    {% if mkspec == "win32-g++" %}
    if_exist_return(C:\llvm19\bin\clang.exe)
    download(https://github.com/mugiseyebrows/build-clang/releases/download/19.1.7/llvm19-mingw.7z, :cache, :v)
    unzip(llvm19-mingw.7z, :o=C:\)
    {% else %}
    if_exist_return(C:\llvm19\bin\clang.exe)
    download(https://github.com/mugiseyebrows/build-clang/releases/download/19.1.7/llvm19-msvc2020.7z, :cache, :v)
    unzip(llvm19-msvc2020.7z, :o=C:\)
    {% endif %}

def mingw
    {% if mkspec == "win32-g++" %}
    add_path(C:\mingw1310_64\bin)
    if_exist_return(C:\mingw1310_64\bin\gcc.exe)
    download(https://github.com/brechtsanders/winlibs_mingw/releases/download/13.1.0-16.0.5-11.0.0-ucrt-r5/winlibs-x86_64-posix-seh-gcc-13.1.0-mingw-w64ucrt-11.0.0-r5.7z, :cache, :v)
    7z rn winlibs-x86_64-posix-seh-gcc-13.1.0-mingw-w64ucrt-11.0.0-r5.7z mingw64 mingw1310_64
    unzip(winlibs-x86_64-posix-seh-gcc-13.1.0-mingw-w64ucrt-11.0.0-r5.7z, :t=C:\mingw1310_64\bin\gcc.exe, :o=C:\)
    {% else %}
    echo 1
    {% endif %}

def mysql
    if_exist_return(C:\mysql-8.2.0-winx64\bin\mysql.exe)
    download(https://cdn.mysql.com/Downloads/MySQL-8.2/mysql-8.2.0-winx64.zip, :cache, :v)
    unzip(mysql-8.2.0-winx64.zip, :o=C:\)

def postgresql
    if_exist_return(C:\postgresql-14\bin\psql.exe)
    download(https://get.enterprisedb.com/postgresql/postgresql-14.12-2-windows-x64-binaries.zip, :cache, :v)
    7z rn postgresql-14.12-2-windows-x64-binaries.zip pgsql postgresql-14
    unzip(postgresql-14.12-2-windows-x64-binaries.zip, :o=C:\)

def protobuf
    if_exist_return(C:\protoc\bin\protoc.exe)
    {% if mkspec == "win32-g++" %}
    download(https://github.com/mugiseyebrows/build-protobuf/releases/download/v32.1/protobuf-mingw13.7z, :cache, :v)
    7z rn protobuf-mingw13.7z protobuf-mingw13 protobuf
    unzip(protobuf-mingw13.7z, :o=C:\)
    {% else %}
    download(https://github.com/mugiseyebrows/build-protobuf/releases/download/v32.1/protobuf-msvc2020.7z, :cache, :v)
    7z rn protobuf-msvc2020.7z protobuf-msvc2020 protobuf
    unzip(protobuf-msvc2020.7z, :o=C:\)
    {% endif %}

{% for module in modules %}
def {{module}}
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja {{module}}/all || exit /b
    popd
{% endfor %}

def install
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja install
    popd
    mugideploy copy-dep --bin C:\Qt\{{ver}}\{{subdir}}\bin\qmake.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin
    mugideploy copy-dep --bin C:\mysql-8.2.0-winx64\lib\libmysql.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
    mugideploy copy-dep --bin C:\postgresql-14\lib\libpq.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
    rem libclang.dll is huge
    rem mugideploy copy-dep --bin C:\Qt\{{ver}}\{{subdir}}\bin\qdoc.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin

def docs
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja docs
        ninja install_docs
    popd

def main depends on mingw mysql postgresql prepare get_source configure {{ modules | join(' ') }} install
    copy(qt-everywhere-src-{{ver}}\build\config.summary, C:\Qt\{{ver}}\{{subdir}})
    zip(Qt-{{ver}}-{{compiler}}.7z, C:\Qt\{{ver}}\{{subdir}})
    #zip(libclang-{{compiler}}.7z, C:\llvm19\bin\libclang.dll)
    github_upload(C:\Qt\{{ver}}\{{subdir}}, :n=Qt-{{ver}}-{{compiler}})
    #github_upload(qt-everywhere-src-{{ver}}\build\config.summary, :n=config.summary)
    github_release(Qt-{{ver}}-{{compiler}}.7z)

github-workflow 1
workflow-name build-{{compiler}}