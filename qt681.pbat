



use-patch-var 1


def qtbase
    # call pull-mingw
    add_path(C:\mingw1310_64\bin)
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    # call pull-postgresql
    add_path(C:\postgresql-14\bin)
    use(python, 3.13)
    install(ninja)
    install(mugideploy)
    use(cmake)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtbase-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtbase-everywhere-src-6.8.1.zip, :t=qtbase-everywhere-src-6.8.1)
    pushd qtbase-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            
                cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=C:/Qt/6.8.1/mingw_64 -DQT_QMAKE_TARGET_MKSPEC=win32-g++ -DQT_BUILD_TESTS=FALSE -DQT_BUILD_EXAMPLES=FALSE -DFEATURE_system_zlib=OFF -DFEATURE_sql_mysql=ON -DFEATURE_sql_psql=ON -DPostgreSQL_ROOT=C:/postgresql-14 -DMySQL_ROOT=C:/mysql-8.2.0-winx64 ..
            
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qtsvg
    # call pull-mingw
    add_path(C:\mingw1310_64\bin)
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    # call pull-postgresql
    add_path(C:\postgresql-14\bin)
    use(python, 3.13)
    install(ninja)
    install(mugideploy)
    use(cmake)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtsvg-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtsvg-everywhere-src-6.8.1.zip, :t=qtsvg-everywhere-src-6.8.1)
    pushd qtsvg-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            
                call qt-configure-module ..
            
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qtactiveqt
    # call pull-mingw
    add_path(C:\mingw1310_64\bin)
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    # call pull-postgresql
    add_path(C:\postgresql-14\bin)
    use(python, 3.13)
    install(ninja)
    install(mugideploy)
    use(cmake)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtactiveqt-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtactiveqt-everywhere-src-6.8.1.zip, :t=qtactiveqt-everywhere-src-6.8.1)
    pushd qtactiveqt-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            
                call qt-configure-module ..
            
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qserialport
    # call pull-mingw
    add_path(C:\mingw1310_64\bin)
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    # call pull-postgresql
    add_path(C:\postgresql-14\bin)
    use(python, 3.13)
    install(ninja)
    install(mugideploy)
    use(cmake)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qserialport-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qserialport-everywhere-src-6.8.1.zip, :t=qserialport-everywhere-src-6.8.1)
    pushd qserialport-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            
                call qt-configure-module ..
            
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qtimageformats
    # call pull-mingw
    add_path(C:\mingw1310_64\bin)
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    # call pull-postgresql
    add_path(C:\postgresql-14\bin)
    use(python, 3.13)
    install(ninja)
    install(mugideploy)
    use(cmake)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtimageformats-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtimageformats-everywhere-src-6.8.1.zip, :t=qtimageformats-everywhere-src-6.8.1)
    pushd qtimageformats-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            
                call qt-configure-module ..
            
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd



def qtsvg depends on qtbase
    use(ninja)
    use(cmake)
    add_path(C:\Qt\6.8.1\mingw_64\bin)
    if_exist_return(C:\Qt\6.8.1\mingw_64\bin\Qt6Svg.dll)
    where(gcc, cmake, ninja, :assert)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtsvg-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtsvg-everywhere-src-6.8.1.zip, :t=qtsvg-everywhere-src-6.8.1)
    pushd qtsvg-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="C:\Qt\6.8.1\mingw_64" -DCMAKE_TOOLCHAIN_FILE=C:\Qt\6.8.1\mingw_64\lib\cmake\Qt6\qt.toolchain.cmake ..
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qtactiveqt depends on qtbase
    use(ninja)
    use(cmake)
    add_path(C:\Qt\6.8.1\mingw_64\bin)
    if_exist_return(C:\Qt\6.8.1\mingw_64\lib\libQt6AxContainer.a)
    where(gcc, cmake, ninja, :assert)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtactiveqt-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtactiveqt-everywhere-src-6.8.1.zip, :t=qtactiveqt-everywhere-src-6.8.1)
    pushd qtactiveqt-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            cmake -G Ninja -DCMAKE_INSTALL_PREFIX="C:\Qt\6.8.1\mingw_64" -DCMAKE_TOOLCHAIN_FILE=C:\Qt\6.8.1\mingw_64\lib\cmake\Qt6\qt.toolchain.cmake ..
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qserialport depends on qtbase
    if_exist_return(C:\Qt\6.8.1\mingw_64\bin\Qt6SerialPort.dll)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtserialport-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtserialport-everywhere-src-6.8.1.zip, :t=qtserialport-everywhere-src-6.8.1)
    pushd qtserialport-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            cmake -G Ninja -DCMAKE_INSTALL_PREFIX="C:\Qt\6.8.1\mingw_64" -DCMAKE_TOOLCHAIN_FILE=C:\Qt\6.8.1\mingw_64\lib\cmake\Qt6\qt.toolchain.cmake ..
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qtimageformats depends on qtbase
    if_exist_return(C:\qt\6.8.1\mingw_64\plugins\imageformats\qwebp.dll)
    download(https://qt.mirror.constant.com/official_releases/qt/6.8/6.8.1/submodules/qtimageformats-everywhere-src-6.8.1.zip, qtimageformats-everywhere-src-6.8.1.zip, :cache, :v)
    unzip(qtimageformats-everywhere-src-6.8.1.zip, :t=qtimageformats-everywhere-src-6.8.1)
    pushd qtimageformats-everywhere-src-6.8.1
        mkdir(build)
        pushd build
            cmake -G Ninja -DCMAKE_INSTALL_PREFIX="C:\Qt\6.8.1\mingw_64" -DCMAKE_TOOLCHAIN_FILE=C:\Qt\6.8.1\mingw_64\lib\cmake\Qt6\qt.toolchain.cmake ..
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
        popd
    popd

def qwt depends on qtbase qtsvg
    git_clone(https://git.code.sf.net/p/qwt/git, qwt, :ref=v6.3.0)
    where(gcc, qmake, mingw32-make, :assert)
    if_exist_return(C:\Qwt-6.3.0-Qt-6.8.1\lib\qwt.dll)
    pushd qwt
        patch(../0001-release-no-examples-no-tests-install-prefix.patch, :p1, :N)
        qmake
        mingw32-make -j4
        mingw32-make install
    popd

def main depends on qtbase qtsvg qtactiveqt qserialport qtimageformats qwt
    zip(Qt-6.8.1.zip, C:\Qt\6.8.1\mingw_64)
    zip(Qwt-6.3.0-Qt-6.8.1.zip, C:\Qwt-6.3.0-Qt-6.8.1)