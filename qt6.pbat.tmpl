{% set majmin = ver.rsplit(".", 1)[0] %}
{% set host = "qt.mirror.constant.com" %}
{% set modules = ["qtbase", "qtactiveqt", "qtcoap", "qtimageformats", "qtlanguageserver", "qtnetworkauth", "qtserialport", "qtserialbus", "qtshadertools", "qtsvg", "qtdeclarative", "qt5compat", "qtconnectivity", "qtgrpc", "qtlottie", "qtmqtt", "qtopcua", "qtpositioning", "qtlocation", "qtquicktimeline", "qtquick3d", "qtgraphs", "qtmultimedia", "qt3d", "qtcharts", "qtdatavis3d", "qtquick3dphysics", "qtquickeffectmaker", "qtremoteobjects", "qtscxml", "qtsensors", "qtspeech", "qttools", "qttranslations", "qtvirtualkeyboard", "qtwayland", "qtwebsockets", "qthttpserver", "qtwebchannel", "qtdoc", "qtwebview"] %}

{% if mkspec == "win32-g++" %}
{% set subdir = "mingw_64" %}
{% set compiler = "mingw13" %}
{% set cc = "gcc" %}
{% set cxx = "g++" %}
{% else %}
{% set subdir = "msvc2020_64" %}
{% set compiler = "msvc2020" %}
{% set cc = "cl" %}
{% set cxx = "cl" %}
{% endif %}

{% macro env() %}
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    add_path(C:\postgresql-14\bin)
    add_path(C:\Qt\{{ver}}\{{subdir}}\bin)
    use(python, 3.13)
    use(conda)
    use(cmake)
    # where python
    install(mugideploy)
    install(ninja)
    set LLVM_INSTALL_DIR=C:\llvm19
    {% if mkspec == "win32-g++" %}
    add_path(C:\mingw1310_64\bin)
    set CC=C:\mingw1310_64\bin\gcc
    set CXX=C:\mingw1310_64\bin\g++
    {% else %}
    call_vcvars()
    {% endif %}
    add_path(C:\llvm19\bin)
{% endmacro %}

def prepare
    github_checkout()
    call pull-mysql
    call pull-postgresql
    {% if mkspec == "win32-g++" %}
    call pull-clang-mingw
    call pull-mingw
    {% else %}
    call pull-clang-msvc
    {% endif %}
    echo dir C:\llvm19\bin\libclang.dll
    dir C:\llvm19\bin\libclang.dll
    move /y C:\mingw64 C:\mingw64_
    move /y "C:\Program Files\PostgreSQL" "C:\Program Files\PostgreSQL_"
    move /y "C:\Program Files\MySQL" "C:\Program Files\MySQL_"
    move /y "C:\Program Files\OpenSSL" "C:\Program Files\OpenSSL_"
    move /y C:\Strawberry C:\Strawberry_
    move /y C:\tools\php C:\tools\php_
    move /y "C:\Program Files\LLVM" "C:\Program Files\LLVM_"

def get_source
    if_exist_return(qt-everywhere-src-{{ver}})
    download(https://{{host}}/official_releases/qt/{{majmin}}/{{ver}}/single/qt-everywhere-src-{{ver}}.zip, :cache, :v)
    unzip(qt-everywhere-src-{{ver}}.zip, :t=qt-everywhere-src-{{ver}})

def configure
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}
        mkdir(build)
        pushd build
            # -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            call ..\configure -prefix C:\Qt\{{ver}}\{{subdir}} -platform {{mkspec}} -release -skip qtwebengine -nomake examples -nomake tests -- -DFEATURE_system_zlib=OFF
            type config.summary
        popd
    popd

{% for module in modules %}
def {{module}}
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja {{module}}/all || exit /b
    popd
{% endfor %}

def install
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja install
    popd
    mugideploy copy-dep --bin C:\Qt\{{ver}}\{{subdir}}\bin\qmake.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin
    mugideploy copy-dep --bin C:\mysql-8.2.0-winx64\lib\libmysql.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
    mugideploy copy-dep --bin C:\postgresql-14\lib\libpq.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
    # mugideploy copy-dep --bin C:\Qt\{{ver}}\{{subdir}}\bin\qdoc.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin

def docs
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja docs
        ninja install_docs
    popd

def main depends on prepare get_source configure {{ modules | join(' ') }} install docs
    zip(Qt-{{ver}}-{{compiler}}.7z, C:\Qt\{{ver}}\{{subdir}})
    #zip(libclang-{{compiler}}.7z, C:\llvm19\bin\libclang.dll)
    github_upload(C:\Qt\{{ver}}\{{subdir}}, :n=Qt-{{ver}}-{{compiler}})
    #github_upload(qt-everywhere-src-{{ver}}\build\config.summary, :n=config.summary)
    github_release(Qt-{{ver}}-{{compiler}}.7z)

github-workflow 1
workflow-name build-{{compiler}}