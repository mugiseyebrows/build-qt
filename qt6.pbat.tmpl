{% set majmin = ver.rsplit(".", 1)[0] %}
{% set qwt_ver = "6.3.0" %}
{% set qwt_ref = "v6.3.0" %}
{% set host = "qt.mirror.constant.com" %}

{% if mkspec == "win32-g++" %}
{% set subdir = "mingw_64" %}
{% set mkspec_ = "mingw" %}
{% set cc = "gcc" %}
{% set cxx = "g++" %}
{% else %}
{% set subdir = "msvc2020_64" %}
{% set mkspec_ = "msvc2020" %}
{% set cc = "cl" %}
{% set cxx = "cl" %}
{% endif %}

def prepare
    github_checkout()
    call pull-mysql
    call pull-postgresql
    {% if mkspec == "win32-g++" %}
    call pull-clang-mingw
    {% else %}
    call pull-clang-msvc
    {% endif %}
    move /y C:\mingw64 C:\mingw64_
    move /y "C:\Program Files\PostgreSQL" "C:\Program Files\PostgreSQL_"
    move /y "C:\Program Files\MySQL" "C:\Program Files\MySQL_"
    move /y "C:\Program Files\OpenSSL" "C:\Program Files\OpenSSL_"
    move /y C:\Strawberry C:\Strawberry_
    move /y C:\tools\php C:\tools\php_

{% for module in ["qtbase", "qtsvg", "qtactiveqt", "qserialport", "qtimageformats", "qtshadertools", "qtdeclarative", "qttools"] %}
def {{module}}
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    # call pull-postgresql
    add_path(C:\postgresql-14\bin)
    add_path(C:\Qt\{{ver}}\{{subdir}}\bin)
    use(python, 3.13)
    install(ninja)
    install(mugideploy)
    use(cmake)
    {% if mkspec == "win32-g++" %}
    add_path(C:\mingw1310_64\bin)
    {% else %}
    call_vcvars()
    {% endif %}

    {% if module == "qttools" %}
    {% if mkspec == "win32-g++" %}
    add_path(C:\llvm19-mingw\bin)
    set LLVM_INSTALL_DIR=C:\llvm19-mingw
    {% else %}
    add_path(C:\llvm19-msvc2020\bin)
    set LLVM_INSTALL_DIR=C:\llvm19-msvc2020
    {% endif %}
    {% endif %}

    download(https://{{host}}/official_releases/qt/{{majmin}}/{{ver}}/submodules/{{module}}-everywhere-src-{{ver}}.zip, :cache, :v)
    unzip({{module}}-everywhere-src-{{ver}}.zip, :t={{module}}-everywhere-src-{{ver}})
    pushd {{module}}-everywhere-src-{{ver}}
        mkdir(build)
        pushd build
            {% if module == "qtbase" %}
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=C:\Qt\{{ver}}\{{subdir}} -DQT_QMAKE_TARGET_MKSPEC={{mkspec}} -DQT_BUILD_TESTS=FALSE -DQT_BUILD_EXAMPLES=FALSE -DFEATURE_system_zlib=OFF -DFEATURE_sql_mysql=ON -DFEATURE_sql_psql=ON -DPostgreSQL_ROOT=C:/postgresql-14 -DMySQL_ROOT=C:/mysql-8.2.0-winx64 ..
            {% else %}
            call qt-configure-module ..
            {% endif %}
            cmake --build . --parallel || exit /b 1
            cmake --install . || exit /b 1
            {% if module == "qtbase" %}
            mugideploy copy-dep --bin C:\Qt\6.8.1\mingw_64\bin\qmake.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin
            mugideploy copy-dep --bin C:\mysql-8.2.0-winx64\lib\libmysql.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
            mugideploy copy-dep --bin C:\postgresql-14\lib\libpq.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
            {% endif %}
            {% if module == "qttools" %}
            mugideploy copy-dep --bin C:\Qt\{{ver}}\{{subdir}}\bin\qdoc.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin
            {% endif %}
        popd
    popd
{% endfor %}

def docs
    {% if mkspec == "win32-g++" %}
    add_path(C:\mingw1310_64\bin)
    {% else %}
    call_vcvars()
    {% endif %}
    {% for module in ["qtbase", "qtsvg", "qtactiveqt", "qserialport", "qtimageformats", "qtshadertools", "qtdeclarative", "qttools"] %}
    pushd {{module}}-everywhere-src-{{ver}}\build
        ninja docs
        ninja install_docs
    popd
    {% endfor %}

def qwt depends on qtbase qtsvg
    git_clone(https://git.code.sf.net/p/qwt/git, qwt, :ref={{qwt_ref}})
    {% if mkspec == "win32-g++" %}
    add_path(C:\mingw1310_64\bin)
    {% else %}
    call_vcvars()
    {% endif %}
    add_path(C:\Qt\{{ver}}\{{subdir}}\bin)
    # if_exist_return(C:\Qwt-{{qwt_ver}}-Qt-{{ver}}\lib\qwt.dll)
    pushd qwt
        "C:\Program Files\Git\usr\bin\patch.exe" -N -p1 -i ../0001-release-no-examples-no-tests-install-prefix.patch
        qmake
        mingw32-make -j4
        mingw32-make install
    popd

def main depends on prepare qtbase qtsvg qtactiveqt qserialport qtimageformats qtshadertools qtdeclarative qttools docs qwt
    zip(Qt-{{ver}}-{{mkspec_}}.zip, C:\Qt\{{ver}}\{{subdir}})
    zip(Qwt-{{qwt_ver}}-Qt-{{ver}}-{{mkspec_}}.zip, C:\Qwt-{{qwt_ver}}-Qt-{{ver}})
    github_upload(Qt-{{ver}}-{{mkspec_}}.zip)
    github_upload(Qwt-{{qwt_ver}}-Qt-{{ver}}-{{mkspec_}}.zip)

github-workflow 1
workflow-name build-{{mkspec_}}