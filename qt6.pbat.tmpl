{% set majmin = ver.rsplit(".", 1)[0] %}
{% set qwt_ver = "6.3.1" %}
{% set qwt_ref = "v6.3.1" %}
{% set host = "qt.mirror.constant.com" %}
{% set modules = ["qtbase", "qtsvg", "qtactiveqt", "qtserialport", "qtimageformats", "qtshadertools", "qtdeclarative", "qttools", "qtcharts", "qtdoc"] %}

{% if mkspec == "win32-g++" %}
{% set subdir = "mingw_64" %}
{% set mkspec_ = "mingw13" %}
{% set cc = "gcc" %}
{% set cxx = "g++" %}
{% else %}
{% set subdir = "msvc2020_64" %}
{% set mkspec_ = "msvc2020" %}
{% set cc = "cl" %}
{% set cxx = "cl" %}
{% endif %}

{% macro env() %}
    # call pull-mysql
    add_path(C:\mysql-8.2.0-winx64\bin)
    add_path(C:\mysql-8.2.0-winx64\lib)
    add_path(C:\postgresql-14\bin)
    add_path(C:\Qt\{{ver}}\{{subdir}}\bin)
    use(python, 3.13)
    use(conda)
    # where python
    install(mugideploy)
    # mugideploy --help
    install(ninja)
    use(cmake)
    set LLVM_INSTALL_DIR=C:\llvm19
    {% if mkspec == "win32-g++" %}
    add_path(C:\mingw1310_64\bin)
    set CC=C:\mingw1310_64\bin\gcc
    set CXX=C:\mingw1310_64\bin\g++
    {% else %}
    call_vcvars()
    {% endif %}
    add_path(C:\llvm19\bin)
{% endmacro %}

def prepare
    github_checkout()
    call pull-mysql
    call pull-postgresql
    {% if mkspec == "win32-g++" %}
    call pull-clang-mingw
    call pull-mingw
    {% else %}
    call pull-clang-msvc
    {% endif %}
    echo dir C:\llvm19\bin\libclang.dll
    dir C:\llvm19\bin\libclang.dll
    move /y C:\mingw64 C:\mingw64_
    move /y "C:\Program Files\PostgreSQL" "C:\Program Files\PostgreSQL_"
    move /y "C:\Program Files\MySQL" "C:\Program Files\MySQL_"
    move /y "C:\Program Files\OpenSSL" "C:\Program Files\OpenSSL_"
    move /y C:\Strawberry C:\Strawberry_
    move /y C:\tools\php C:\tools\php_
    move /y "C:\Program Files\LLVM" "C:\Program Files\LLVM_"

def configure
    {{ env() }}
    download(https://{{host}}/official_releases/qt/{{majmin}}/{{ver}}/single/qt-everywhere-src-{{ver}}.zip, :cache, :v)
    unzip(qt-everywhere-src-{{ver}}.zip, :t=qt-everywhere-src-{{ver}})
    pushd qt-everywhere-src-{{ver}}
        mkdir(build)
        pushd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DQT_BUILD_SUBMODULES="{{ modules | join(';') }}" -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=C:\Qt\{{ver}}\{{subdir}} -DQT_QMAKE_TARGET_MKSPEC={{mkspec}} -DQT_BUILD_TESTS=FALSE -DQT_BUILD_EXAMPLES=FALSE -DFEATURE_system_zlib=OFF -DFEATURE_sql_mysql=ON -DFEATURE_sql_psql=ON -DPostgreSQL_ROOT=C:/postgresql-14 -DMySQL_ROOT=C:/mysql-8.2.0-winx64 -Wno-dev ..
            type config.summary
        popd
    popd

{% for module in modules %}
def {{module}}
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja {{module}}
    popd
{% endfor %}

def install
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja
        ninja install
    popd
    mugideploy copy-dep --bin C:\Qt\{{ver}}\{{subdir}}\bin\qmake.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin
    mugideploy copy-dep --bin C:\mysql-8.2.0-winx64\lib\libmysql.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
    mugideploy copy-dep --bin C:\postgresql-14\lib\libpq.dll --dst C:\Qt\{{ver}}\{{subdir}}\bin
    # mugideploy copy-dep --bin C:\Qt\{{ver}}\{{subdir}}\bin\qdoc.exe --dst C:\Qt\{{ver}}\{{subdir}}\bin

def docs
    {{ env() }}
    pushd qt-everywhere-src-{{ver}}\build
        ninja docs
        ninja install_docs
    popd

def qwt depends on qtbase qtsvg
    # if_exist_return(C:\Qwt-{{qwt_ver}}-Qt-{{ver}}\lib\qwt.dll)
    {{ env() }}
    git_clone(https://git.code.sf.net/p/qwt/git, qwt, :ref={{qwt_ref}})
    pushd qwt
        "C:\Program Files\Git\usr\bin\patch.exe" -N -p1 -i ../0001-release-no-examples-no-tests-install-prefix.patch
        qmake
        {% if mkspec == "win32-g++" %}
        mingw32-make -j4
        mingw32-make install
        {% else %}
        nmake
        nmake install
        {% endif %}
    popd

def main depends on prepare configure {{ modules | join(' ') }} install docs qwt
    zip(Qt-{{ver}}-{{mkspec_}}.7z, C:\Qt\{{ver}}\{{subdir}})
    zip(Qwt-{{qwt_ver}}-Qt-{{ver}}-{{mkspec_}}.7z, C:\Qwt-{{qwt_ver}}-Qt-{{ver}})
    zip(libclang-{{mkspec_}}.7z, C:\llvm19\bin\libclang.dll)
    github_upload(C:\Qt\{{ver}}\{{subdir}}, :n=Qt-{{ver}}-{{mkspec_}})
    github_upload(C:\Qwt-{{qwt_ver}}-Qt-{{ver}}, :n=Qwt-{{qwt_ver}}-Qt-{{ver}}-{{mkspec_}})
    #github_upload(mugideploy.log, :n=mugideploy.log)
    github_upload(qt-everywhere-src-{{ver}}\build\config.summary, :n=config.summary)
    github_release(Qt-{{ver}}-{{mkspec_}}.7z, Qwt-{{qwt_ver}}-Qt-{{ver}}-{{mkspec_}}.7z, libclang-{{mkspec_}}.7z)

github-workflow 1
workflow-name build-{{mkspec_}}